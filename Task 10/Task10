<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>


<script>

    // 1) Створити карту користувача(User Card):
    // Створити функцію «userCard» яка приймає число(будь-яке число) і повертає
    // об’єкт з методами:
    //     const card3 = userCard(3); // returns an object with methods
    // User Card методи:
    //     getCardOptions. Дана функція повертає об’єкт котрий містить інформацію про
    // карту:
    //     card3.getCardOptions(); // returns options object with card info
    // Об’єкт має містити такі властивості:
    //     • balance (по замовчуванням 100)
    // • transactionLimit (по замовчуванням 100. Це ліміт коштів які ви можете взяти з
    // карти)
    // • historyLogs (масив об’єктів який містить інформацію про операції та трансакції
    // данної карти)
    // • key (число в діапазоні[1; 3] залежить від числа яке ви передали в userCard
    // функції. Кожна карта повинна мати унікальний key)
    // putCredits. Ця функція отримує певну кількість грошей і заповнює баланс
    // карти:
    //     card3.putCredits(150);
    // takeCredits. Ця функція отримує певну кількість грошей і віднімає ці кошти з
    // баланса карти (протилежний за дією від метода putCredits):
    // card3.takeCredits(100);
    // Ви можете брати кошти з картки, якщо ліміт транзакцій та залишок коштів
    // перевищують кількість коштів, які ви бажаєте взяти. Якщо ні, то слід записати
    // відповідне повідомлення у консолі (скористайтеся console.error)
    // setTransactionLimit.Ця функція приймає як аргумент число і встановлює його
    // як ліміт транзакцій на картці
    // card3.setTransactionLimit(5000);
    // transferCredits.
    //     Ця функція отримує два аргументи - кількість кредитів, які потрібно передати,
    //     та карту одержувача (інший об’єкт, створений функцією `userCard` - card1):
    // card3.transferCredits(50, card1);
    // Кошти, які ви хочете передати, повинні обкладатися податками 0,5%.
    // Не забудьте перед перерахуванням перевірити залишок балансу та ліміт
    // транзакцій відправника кредитів (card3).
    //     Ви повинні відслідковувати тільки Put credits/Take credits/Transaction limit
    // change операції і зберігайте history log. History log (Дивитись зображення 1)
    // інформація має зберігатись в об’єктах з такими властивостями:
    //     • operationType (стрічка яка описує здійснену операцію)
    // • credits (кількість коштів)
    // • operationTime (формат: "27/07/2018, 03:24:53". Час коли була здійснена операція)

    function userCard(x) {
        const cardOptions = {
            balance: 100,
            transactionLimit: 100,
            historyLogs: [],
            key: x
        };

        const addLog = (operationType, credits) =>  {
            cardOptions.historyLogs.push({
                operationType,
                credits,
                operationTime: `${new Date().toLocaleDateString('en-US')}, ${new Date().toLocaleTimeString()}`
            });
        };

        const getCardOptions =  (getCardOptions) => {
            return cardOptions
        };
        const putCredits = (money) => {
            if (money > cardOptions.transactionLimit) {
                console.error('Limit exceeded');
                return;
            }
            cardOptions.balance += money;
            addLog('Put credit', money);

        };
        const setTransactionLimit = (lim) => {
            cardOptions.transactionLimit = lim;
            addLog('Transaction limit change', lim);
        };
        const takeCredits = (money) => {
            if (money > cardOptions.transactionLimit) {
                console.error('Limit exceeded');
                return;
            }
            if (money > cardOptions.balance) {
                console.error('Not enough money');
                return;
            }
            cardOptions.balance -= money;

            addLog('Take credit', money);
        };
        const transferCredits = (money, user1) => {
            const tax = money * 0.05;
            const valueIncludingTax = money + tax;
            if (valueIncludingTax > cardOptions.transactionLimit) {
                console.error('Limit exceeded');
                return;
            }
            if (valueIncludingTax > cardOptions.balance) {
                console.error('Not enough money');
                return;
            }
            takeCredits(valueIncludingTax);

            user1.putCredits(money);
        }
        return {
            getCardOptions,
            putCredits,
            setTransactionLimit,
            takeCredits,
            transferCredits
        };
    }
    // створити карту
    // let card1 = userCard(1);
    // // console.log(card1.getCardOptions()); // {balance: 100, transactionLimit: 100, historyLogs: Array(0), key: 1}
    //
    //
    // // Поповнюю картку на 500 гривень
    // card1.putCredits(500);
    // // console.log(card1.getCardOptions()); // {balance: 600, transactionLimit: 100, historyLogs: Array(1), key: 1}
    //
    // // Встановлюю ліміт у 3000 гривень
    // card1.setTransactionLimit(3000);
    // // console.log(card1.getCardOptions()); // {balance: 600, transactionLimit: 3000, historyLogs: Array(2), key: 1}
    //
    // // Знімаю гроші
    // card1.takeCredits(100);
    // console.log(card1.getCardOptions()); // {balance: 500, transactionLimit: 3000, historyLogs: Array(3), key: 1}

    //
    // let card2 = userCard(2);
    // card1.transferCredits(800, card2);
    // card1.transferCredits(200, card2);
    // card1.transferCredits(30, card2);


    // console.log(card1.getCardOptions().historyLogs);




    // 2) Створити UserAccount:
    //     Створити класс `UserAccount` (для цього завдання можна використати ES6 класс
    // або звичайну функцію):
    // const user = new UserAccount('Bob');
    // Класс має містити:
    //     Властивості акаунту користувача:
    //     - name (передати в конструкторі)
    // - cards (Масив карток користувача. Масив не має бути довшим ніж 3)
    // Методи акаунту користувача:
    //     - addCard. Створює нову карту (використовуйте ‘userCard’ функцію) та додайте її до
    // cards:
    //     user.addCard();
    // Користувач повинен мати <= 3 карти.
    // - getCardByKey. Приймає число в діапазоні {1; 3} і повертає об’єкт карти
    // /*
    //  * Повертає об’єкт {
    //  * key: 1,
    //  * balance: 150,
    //  * ...other card properties
    //  * }
    //  */
    // user.getCardByKey(1);
    // Код
    // Приклад переказу коштів:
    //     let user = new UserAccount('Bob');
    // user.addCard()
    // user.addCard()
    // let card1 = user.getCardByKey(1);
    // let card2 = user.getCardByKey(2);
    // card1.putCredits(500);
    // card1.setTransactionLimit(800);
    // card1.transferCredits(300, card2);
    // card2.takeCredits(50);
    // console.log(card1.getCardOptions()); // див зображення 2

    class UserAccount {
        constructor(name) {
            this.name = name;
            this.cards = []
        }

        addCard() {
            if (this.cards.length < 3) {
                this.cards.push(userCard(this.cards.length + 1));
            }
        }
        getCardByKey(key) {
            const card = this.cards.find(card => card.getCardOptions().key === key);
            if (!card) {
                console.error('There is no card by given key');
                return;
            }
            return card;
        }
    }

    const user1 = new UserAccount('Sanya');

    // Додати карти
    user1.addCard();
    user1.addCard();
    // Отримати карту по ключу
    const userCard1 = user1.getCardByKey(1);
    const userCard2 = user1.getCardByKey(2);
    const userCard1Options = userCard1.getCardOptions();
    const userCard2Options = userCard2.getCardOptions();
    // Поставити ліміт на першу картку
    userCard1.setTransactionLimit(500);
    console.log(userCard1Options.transactionLimit);
    // Закинути гроші на першу картку
    userCard1.putCredits(500);
    console.log(userCard1Options.historyLogs);
    userCard2.setTransactionLimit(200);
    console.log(userCard2Options.transactionLimit);
    // Перекинути гроші з першої картки на другу
    userCard1.transferCredits(200, userCard2);
    console.log(userCard1Options.balance);
    console.log(userCard2.getCardOptions().balance);
    // Зняти гроші з другої картки
    userCard2.takeCredits(50);
    console.log(userCard2.getCardOptions());
</script>
</body>
</html>
